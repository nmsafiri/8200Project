There's a min_feature_size for each layer
Select #features, try even multiples of min_feature_size as you go down
  Ie: mfs = 3, current#fs = 12 ==> Try 9, 6, 3 fs
  doing this for target layer index in layer indices
  use compute_resource() to see how ya did with the new network configuration
  after each iteration of this process, you see if you met the global iteration constraint and quit once you do
  if you go through everything without finding something to satisfy new constraint, warning

since latency, you go to compute_latency_from_lookup_table(), which looks at the saved file and adds up all pre-measured latencies or interpolates as needed
So actually we look at build_latency_lookup_table(), which runs much earlier and makes the layers all exist (construct via torch)
  then get measurement from measure_latency() and add it to the lookup table


So things you have to do:
## master.py
1) Argument support to add resource_type ENERGY

## functions.py
2) compute_resource() to select ENERGY type
3) dup or modify compute_latency_from_lookup_table() to specify resource type and split on LATENCY and ENERGY
  3a) You need a KEY_ENERGY at some point (in constants.py) to properly index in the same fashion as existing work
4) dup or modify build_latency_lookup_table() to specify resource type and split on ENERGY (LATENCY split already exists for some reason)
5) add measure_energy() function a la measure_latency() function to get the resource usage

## network_utils/network_utils_*.py
6) Modify build_lookup_table() to distinguish between LATENCY and ENERGY builds in manner that matches functions.py changes
